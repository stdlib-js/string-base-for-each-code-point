{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/; // TODO: replace with stdlib pkg\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/; // TODO: replace with stdlib pkg\n\n\n// MAIN //\n\n/**\n* Invokes a function for each Unicode code point in a string.\n*\n* @param {string} str - input string\n* @param {Function} clbk - function to invoke\n* @param {*} [thisArg] - execution context\n* @returns {string} input string\n*\n* @example\n* function log( value, index ) {\n*     console.log( '%d: %s', index, value );\n* }\n*\n* forEach( 'Hello', log );\n*/\nfunction forEach( str, clbk, thisArg ) {\n\tvar len;\n\tvar ch1;\n\tvar ch2;\n\tvar idx;\n\tvar ch;\n\tvar i;\n\n\tlen = str.length;\n\n\t// Process the string one Unicode code unit at a time and handle UTF-16 surrogate pairs as a single Unicode code point...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tch1 = str[ i ];\n\t\tidx = i;\n\t\tch = ch1;\n\n\t\t// Check for a UTF-16 surrogate pair...\n\t\tif ( i < len-1 && RE_UTF16_HIGH_SURROGATE.test( ch1 ) ) {\n\t\t\t// Check whether the high surrogate is paired with a low surrogate...\n\t\t\tch2 = str[ i+1 ];\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test( ch2 ) ) {\n\t\t\t\t// We found a surrogate pair:\n\t\t\t\tch += ch2;\n\t\t\t\ti += 1; // bump the index to process the next code unit\n\t\t\t}\n\t\t}\n\t\t// Note: `ch` may be a lone surrogate (e.g., a low surrogate without a preceding high surrogate or a high surrogate at the end of the input string).\n\n\t\t// Invoke the callback with the code point:\n\t\tclbk.call( thisArg, ch, idx, str );\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default forEach;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","forEach","str","clbk","thisArg","len","ch1","ch2","idx","ch","i","length","test","call"],"mappings":";;AAsBA,IAAIA,EAAyB,kBACzBC,EAA0B,kBAoB9B,SAASC,EAASC,EAAKC,EAAMC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAL,EAAMH,EAAIS,OAGJD,EAAI,EAAGA,EAAIL,EAAKK,IAErBF,EAAME,EACND,EAFAH,EAAMJ,EAAKQ,GAKNA,EAAIL,EAAI,GAAKL,EAAwBY,KAAMN,KAE/CC,EAAML,EAAKQ,EAAE,GACRX,EAAuBa,KAAML,KAEjCE,GAAMF,EACNG,GAAK,IAMPP,EAAKU,KAAMT,EAASK,EAAID,EAAKN,GAE9B,OAAOA,CACR"}